<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Not C++ on Madhav Khosla</title><link>https://madhavkhoslaa.github.io/tags/not-c++/</link><description>Recent content in Not C++ on Madhav Khosla</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Sep 2022 23:01:35 +0530</lastBuildDate><atom:link href="https://madhavkhoslaa.github.io/tags/not-c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Programming in Rust 2: Iterators</title><link>https://madhavkhoslaa.github.io/posts/rustiter/</link><pubDate>Wed, 28 Sep 2022 23:01:35 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/rustiter/</guid><description>Iterator Design Pattern, What is it? Example 1 Let&amp;rsquo;s consider you are this tiny person in the image and you have to walk traverse the tree below. Ideally, how you traverse it, it does not matter what is the most important thing is 1. where you are and 2. Where you want to be when you go to the next node.
So in a way, an iterator design pattern(in real life) is a thought process of how you iterate a structure(not just a tree), or you know where you want(not how) to go next.</description></item><item><title>Understanding Rust Ownership</title><link>https://madhavkhoslaa.github.io/posts/rustownership/</link><pubDate>Sun, 03 Jul 2022 02:01:58 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/rustownership/</guid><description>Ownership is one of the features that make it different than so many programming languages and what makes it memory safe and a good language for concurrent programming. It solves problems like null pointers, dangling pointers and data races without a garbage collector at the run time.
Understanding Rust Ownership How is data stored in the program? Stack Heap Data(variables in function arguments and defined) in the stack have a known type hence the size of the data in the stack is known at the time of compilation.</description></item><item><title>Static and Dynamic Dispatch in Rust</title><link>https://madhavkhoslaa.github.io/draft/dyn/</link><pubDate>Mon, 27 Jun 2022 02:01:58 +0530</pubDate><guid>https://madhavkhoslaa.github.io/draft/dyn/</guid><description>Static and Dynamic Dispatch in Rust</description></item></channel></rss>