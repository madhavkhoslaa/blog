<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on Madhav Khosla</title><link>https://madhavkhoslaa.github.io/tags/design-patterns/</link><description>Recent content in Design Patterns on Madhav Khosla</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Sep 2022 23:01:35 +0530</lastBuildDate><atom:link href="https://madhavkhoslaa.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Programming in Rust 2: Iterators</title><link>https://madhavkhoslaa.github.io/posts/rustiter/</link><pubDate>Wed, 28 Sep 2022 23:01:35 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/rustiter/</guid><description>Iterator Design Pattern, What is it ? Example 1 Let&amp;rsquo;s consider you are this tiny person in the image and you have too walk traverse the tree below. Ideally how you traverse it, it does not matter what is the most important thing is 1. where you are and 2. Where you want to be when you go to the next node.
So in a way an iterator design pattern(in real life) is a thought process of how you iterate a structure(not just a tree), or you knowing where you want(not how) to go next.</description></item><item><title>Creational Design Patterns: My lessons on it</title><link>https://madhavkhoslaa.github.io/posts/ceationaldesignpatterns/</link><pubDate>Fri, 24 Jun 2022 02:01:58 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/ceationaldesignpatterns/</guid><description>Creational Design Patterns Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.
Why were they made and why should you care about reading them? You must have noticed in a larger code base where multiple classes dealing with the class instantiation becomes too hard, in fact in the case of languages like java where the ecosystem expects everything to be a class; a framework called spring had been developed to solve the problem of instantiating classes(and so much more).</description></item><item><title>SOLID Patterns: My lessons on it</title><link>https://madhavkhoslaa.github.io/posts/solid/</link><pubDate>Tue, 07 Jun 2022 04:01:25 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/solid/</guid><description>SOLID is just an acronym for a few principles that Robert C. Martin compiled together. SOLID Design principles aim to make your code base extensible, easy to modify in the future, and easy to debug and fix. They are not rules just a bunch of thought ideas of segregation of logic and how to organize your code.
S =&amp;gt; Single Responsibility Principle
O =&amp;gt; Open Close Princple
L =&amp;gt; Liskov Substitution Principle</description></item></channel></rss>