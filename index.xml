<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Madhav Khosla</title><link>https://madhavkhoslaa.github.io/</link><description>Recent content on Madhav Khosla</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Jun 2022 02:01:58 +0530</lastBuildDate><atom:link href="https://madhavkhoslaa.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Creational Design Patterns: My lessons on it</title><link>https://madhavkhoslaa.github.io/posts/ceationaldesignpatterns/</link><pubDate>Fri, 24 Jun 2022 02:01:58 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/ceationaldesignpatterns/</guid><description>Creational Design Patterns Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.
Creational design patterns aid in the instantiation of objects by providing suitable abstractions and make the systems independent of how objects are created composed and represented.
They are important when a system grows large and require how objects are constructed rather than what objects are constructed. They are a step above a normal hardcoded instantiation like const instance = new SomeClass()</description></item><item><title>SOLID Patterns: My lessons on it</title><link>https://madhavkhoslaa.github.io/posts/solid/</link><pubDate>Tue, 07 Jun 2022 04:01:25 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/solid/</guid><description>SOLID is just an acronym for a few principles that Robert C. Martin compiled together. SOLID Design principles aim to make your code base extensible, easy to modify in the future, and easy to debug and fix. They are not rules just a bunch of thought ideas of segregation of logic and how to organize your code.
S =&amp;gt; Single Responsibility Principle
O =&amp;gt; Open Close Princple
L =&amp;gt; Liskov Substitution Principle</description></item><item><title>Caching: My lessons on it</title><link>https://madhavkhoslaa.github.io/posts/post1/</link><pubDate>Sat, 19 Mar 2022 02:01:58 +0530</pubDate><guid>https://madhavkhoslaa.github.io/posts/post1/</guid><description>Caching is a cheap way to scale a system&amp;rsquo;s performance in very less time. Being cheap and easy to implement on the top of a existing system it also brings some problems such as invalidation and infrastructure for setting up the cache itself. Here I plan to talk about some lessons on caching that I&amp;rsquo;ve learnt in a few months.
Philosophy of Caching The supreme art of war is to subdue the enemy without fighting it - Sun Tzu</description></item><item><title>About</title><link>https://madhavkhoslaa.github.io/about/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://madhavkhoslaa.github.io/about/</guid><description>Hey, Iâ€™m Madhav; Join me in the pursuit of becoming a better software engineer. I plan to write here about what I learned and what seems to me to be the core of what you need to know as someone who is writing code and web applications.
What&amp;rsquo;s the deal here? A place where I am in control, with no censorship or manupilation. A place where my words don&amp;rsquo;t get mixed up with noise.</description></item></channel></rss>